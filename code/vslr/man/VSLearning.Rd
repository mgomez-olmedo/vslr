% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VSLearning.R
\name{VSLearning}
\alias{VSLearning}
\title{Class for variational structure learning}
\description{
Class for variational structure learning

Class for variational structure learning
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-VSLearning-new}{\code{VSLearning$new()}}
\item \href{#method-VSLearning-learn}{\code{VSLearning$learn()}}
\item \href{#method-VSLearning-getModel}{\code{VSLearning$getModel()}}
\item \href{#method-VSLearning-getMeasures}{\code{VSLearning$getMeasures()}}
\item \href{#method-VSLearning-clone}{\code{VSLearning$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VSLearning-new"></a>}}
\if{latex}{\out{\hypertarget{method-VSLearning-new}{}}}
\subsection{Method \code{new()}}{
class constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VSLearning$new(
  filenameTrain,
  filenameTest,
  initializationMethod,
  maxIter,
  nParentSets,
  dataPath = "./data/bnet/"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filenameTrain}}{name of the file with the train data}

\item{\code{filenameTest}}{name of the file with the test data}

\item{\code{initializationMethod}}{method to employ for
initializing probability matrices
possible values: 1 (random), 2 (uniform), 3 (pc algorithm),
4 (hill climbing), 5 (tabu search)}

\item{\code{maxIter}}{maximum number of iterations of the
cycle of improvement}

\item{\code{nParentSets}}{number of parents to sample}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VSLearning-learn"></a>}}
\if{latex}{\out{\hypertarget{method-VSLearning-learn}{}}}
\subsection{Method \code{learn()}}{
main method for learning
gets the probabilistic model computed by the method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VSLearning$learn()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VSLearning-getModel"></a>}}
\if{latex}{\out{\hypertarget{method-VSLearning-getModel}{}}}
\subsection{Method \code{getModel()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VSLearning$getModel()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
probQ object
gets the relevant measures about the execution of the
algoritm
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VSLearning-getMeasures"></a>}}
\if{latex}{\out{\hypertarget{method-VSLearning-getMeasures}{}}}
\subsection{Method \code{getMeasures()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VSLearning$getMeasures()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
vector with relevant measures
#################################################################
private part of the class
#################################################################
private part of the class
initialization method
produced by bnlearn
the model is initialized with a bnlearn method) using train data
the model is initialized with a bnlearn method) using test data
initialize method for matrices depending on
computes the bound of the current situation
param - bnlearn flag to show if bound on bnlearn model is
               required
param - test flag to show if the score for the model must
               be computed ob test dataset
param - update flag to show if bounds must be updated
method for generating parent sets. The method returns
a matrix with a certain number of rows (samples). The
values equals to 1 in a variable column states that Xj
must be considered as parent for such sample
gets the different patterns for each database of
sampled parents
computes lower bound in order to check the evolution
of the system
param update - to show if bounds must be updated for
evolution info
param test - flag to show if score for normal model must
be computed on test dataset
computes lower bound in order to check the evolution
of the system but considering just a pair of variables
because the score for the rest of variables is not
modified
param i - index of the first variable
param j - index of the second variable
method for updating the distribution of a given variable
param i - index of the first variable
param j - index of the second variable
computes the score of a variable given a sample set
of parents
param i - index of target variable
param pa - configuration of parents to consider
param test - flag to show if the score for the normal
model must be computed on test dataset
computes the global entropy
computes the entropy for a given triplet of values
representing <-, ind, ->
computes a model learning with bnlearn::pc.stable algorithm
computes a model learning with bnlearn::hc algorithm
computes a model learning with bnlearn::tabu algorithm
updates bounds if needed
param - bound regular bound
param - avgBound averaging bound
makes a parallel evaluation for the scores of the variables. It
assumes the level of parallelism is reduced to looping over
the variables
param test - flag to show if the score on the normal model
must be computed on test dataset
makes a sequential evaluation for the scores of the variables
param - test flag to show if the score for the normal model
must be computed on test dataset
generation of parent sets using parallel facilities
param - varIndex index of target variable
param - posterior indices posterior to i
param - previous indices previous to i
generation of parent sets using sequential loop
param varIndex - index of target variable
param posterior - indices posterior to i
param previous - indices previous to i
compute score for a variable and a given set of patterns with a
parallel approach
param i - index of target variable
param patterns - patterns obtained from parent sets
param test - flag to set if the score must be computed
            also on test dataset for the regular bound
compute score for a variable and a given set of patterns with a
sequential approach
param i - index of target variable
param patterns - patterns obtained from parent sets
param test - flag to set if computation for the normal score
parallalel computation of entropy
sequential computation of entropy
shows information about triplets related to some data about
the model
param matrix - information about arcs
gets the index of a given variable
param varName - name of the target variable
computes the structural error of the model
creates a data frame for storing arcs information
summs two matrixes of the same dimension treating
the values as booleans. The method is used for
aggregating datasets of parents
param mat1 - first matrix
param mat2 - second matrix
return - sum matrix
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VSLearning-clone"></a>}}
\if{latex}{\out{\hypertarget{method-VSLearning-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VSLearning$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
